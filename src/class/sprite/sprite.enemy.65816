/**
* Generic animated sprite with single animation file 
* 
* @param 1<int, 16bit>  x-pos
* @param 2<int, 16bit>  y-pos
* @param 3<int, 16bit>  x-size
* @param 4<int, 16bit>  y-size
* @param 5<int, 16bit>  enemy type
* @param 6<int, 16bit>  angle
* @param 7<int, 16bit>  speed
funkhaus europa, 24.11, 17:50 ende
*/
.include "src/class/sprite/sprite.enemy.h"
.section "sprite.enemy"

  METHOD init
  lda OBJECT.CALL.ARG.1,s
  sta.b dimension.position.x + 1

  lda OBJECT.CALL.ARG.2,s
  sta.b dimension.position.y + 1

  lda OBJECT.CALL.ARG.5,s
  cmp #SPRITE.ENEMY.TYPE.MAX
  bcc +
    TRIGGER_ERROR E_IndexError

+
  sta.b this.type

  lda OBJECT.CALL.ARG.6,s
  sta.b this.angle

  lda OBJECT.CALL.ARG.7,s
  sta.b this.speed

  lda.w #(ANIMATION.FLAGS.IS_LOOPING | ANIMATION.FLAGS.IS_COLOR_MATH)
  tsb animation.flags.static

  lda.w #OAM.PRIORITY.2
  sta animation.buffer.flags
  
  lda this.type
  asl a
  tax
  lda.l enemy.animation.lut,x
  jsr sprite.library.startAnimation.try
  bcs +
    jmp _kill

+
  lda.w #(ANIMATION.FLAGS.IS_LOOPING | ANIMATION.FLAGS.IS_COLOR_MATH)
  tsb animation.flags.static

  ;set bg collision basepoint
  lda dimension.size.x
  lsr a
  sta dimension.collision.basepoint.x

  lda dimension.size.y
  lsr a
  sta dimension.collision.basepoint.y

  lda this.type
  asl a
  tax
  lda.l enemy.diameter.lut,x
  sta dimension.collision.diameter

  rts

_explode:
    AX16
    lda.w #AUDIO.EFFECT.ROCKET_EXPLOSION
    jsr interface.dimension.playSoundEffect

    lda.w #SPRITE.ENEMY.STATE.EXPLODING
    sta this.state

    pea 0
    pea 3
    pea SPRITE.effect.explosion.small.PTR
    pei (dimension.position.y+1)
    pei (dimension.position.x+1)
    NEW_TRY sprite.once.CLS.PTR VOID
    pla
    pla
    pla
    pla
    pla
    rts

  METHOD pause
  jmp sprite.library.pauseAnimation

  METHOD play
  inc this.age
  lda this.state
  asl a
  tax
  jsr (_state.lut,x)
  bcs +
    jmp _kill

+
  rts

_state.lut:
  .dw _state.playing
  .dw _state.exploding

_state.exploding:
  AX16  
  jsr sprite.library.playAnimation

  lda animation.flags.static
  bit.w #ANIMATION.FLAGS.IS_PLAYING
    clc
    rts

+
  sec
  rts

_state.playing:
  AX16
  jsr sprite.library.playAnimation

  lda this.type
  asl a
  tax
  jsr (_play.lut,x)

  ;update current tile if moved
  pea 0
  lda dimension.position.y+1
  clc
  adc dimension.collision.basepoint.y
  lsr a
  lsr a
  lsr a
  sta 1,s
  lda dimension.position.last.y
  clc
  adc dimension.collision.basepoint.y
  lsr a
  lsr a
  lsr a
  cmp 1,s
  bne ++

  lda dimension.position.x+1
  clc
  adc dimension.collision.basepoint.x
  lsr a
  lsr a
  lsr a
  sta 1,s
  lda dimension.position.last.x
  clc
  adc dimension.collision.basepoint.x
  lsr a
  lsr a
  lsr a
  cmp 1,s
  beq +

++
    ;get current tile
    lda dimension.position.y+1
    clc
    adc dimension.collision.basepoint.y
    pha
    lda dimension.position.x+1
    clc
    adc dimension.collision.basepoint.x
    pha

    jsr level.library.getCollisionTile
    sta this.collision.tile
    pla
    pla

+
  pla

  ;keep last position
  lda dimension.position.y+1
  sta dimension.position.last.y
  lda dimension.position.x+1
  sta dimension.position.last.x

  ;die if background hit
  lda this.collision.tile
  and.w #LEVEL.COLLISION.MODE.MASK
  cmp.w #LEVEL.COLLISION.MODE.HURT
  bne +
    jsr _explode

+

  ;kill immediately if offscreen after some time.
  lda this.age
  cmp #40
  bcc +
  
  lda iterator.properties
  bit.w #OBJECT.PROPERTIES.isOnScreen
  bne +
    clc
    rts

+
  sec
  rts

_play.lut:
  .dw _play.static
  .dw _play.static
  .dw _play.static
  .dw _play.static
  .dw _play.static
  .dw _play.moving
  .dw _play.moving
  .dw _play.moving
  .dw _play.moving
  .dw _play.moving
  .dw _play.circling
  .dw _play.jumping
  .dw _play.falling
  .dw _play.shooting

_play.static:
  AX16
  rts

_play.shooting:
  lda.w #ANIMATION.FLAGS.X_MIRROR
  tsb animation.flags.static
  
  lda.w FrameCounter
  and.w #$3
  bne _play.moving
    jsr entity.angle.apply

_play.moving:
  AX16
  jmp entity.angle.apply

_play.circling:
  AX16
  lda this.angle
  inc a
  inc a
  and.w #$ff
  sta this.angle
  jmp entity.angle.apply

  METHOD kill
  jmp sprite.library.kill 

_play.jumping:
  AX16
  lda this.age
  cmp #60
  bcc +
    lda this.speed
    clc
    adc #GRAVITY.ACCELERATION
    sta this.speed
    lda dimension.position.y
    clc
    adc this.speed
    sta dimension.position.y

+
  rts

;wait, then fall
_play.falling:
  AX16
  lda this.age
  cmp #90
  bcc +
    inc dimension.position.y+1
    inc dimension.position.y+1
    inc dimension.position.y+1
    inc dimension.position.y+1

+
  rts

  CLASS sprite.enemy
.ends	
	
