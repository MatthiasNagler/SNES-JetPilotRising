/**
* Part of a crude, hardcoded interface model.
*
*/

;zp-vars
.enum 0
  _iterator INSTANCEOF iteratorStruct
  _dimension INSTANCEOF dimensionStruct
.ende

.section "interface.dimension"
/*
* set pixel position of object
*/
interface.dimension.setPosition:
  AX16
  lda OBJECT.CALL.ARG.1,s
  stz.b _dimension.position.x
  sta.b _dimension.position.x + 1

  lda OBJECT.CALL.ARG.2,s
  stz.b _dimension.position.y  
  sta.b _dimension.position.y + 1
    
  rts


/*
* get pixel position of object
*/
interface.dimension.getPosition:
  AX16
  lda.b _dimension.direction
  and.w #$ff
  ldx.b _dimension.position.x + 1
  ldy.b _dimension.position.y + 1
  rts

/*
* get pixel position of object
*/
interface.dimension.getCenterPosition:
  AX16
  lda _dimension.size.x
  lsr a
  clc
  adc _dimension.position.x + 1
  tax
  lda _dimension.size.y
  lsr a
  clc
  adc _dimension.position.y + 1
  tay
  rts


/*
* get pixel position of object
*/
interface.dimension.getCollisionBasepoint:
  AX16
  lda.b _dimension.position.x + 1
  clc
  adc _dimension.collision.basepoint.x
  tax  
  lda.b _dimension.position.y + 1
  clc
  adc _dimension.collision.basepoint.y
  tay
  sec
  rts
 
/*
* get pixel size of object, also direction (hack)
*/
interface.dimension.getSize:
  AX16
  ldx.b _dimension.size.x
  ldy.b _dimension.size.y
  lda.b _dimension.direction
  and.w #$ff
  rts

/*
* move object with subpixel accuracy
*
* param 1 <int, 16bit>  ;x-axis translation value
* param 2 <int, 16bit>  ;y-axis translation value
*/
interface.dimension.translate:
  AX16
  lda OBJECT.CALL.ARG.2,s
  tay
  lda OBJECT.CALL.ARG.1,s
  tax  
  jmp dimension.library.translate


dimension.library.translate:
  AX16
  tya
  bmi +
    adc.b _dimension.position.y
    sta.b _dimension.position.y
    sep #$20
    lda _dimension.position.y + 2
    adc #0
    sta _dimension.position.y + 2
    bra ++
    
+
    adc.b _dimension.position.y
    sta.b _dimension.position.y
    sep #$20
    lda _dimension.position.y + 2
    sbc #0
    sta _dimension.position.y + 2

++
  rep #$31
  txa
  bmi +
    adc.b _dimension.position.x
    sta.b _dimension.position.x
    sep #$20
    lda _dimension.position.x + 2
    adc #0
    sta _dimension.position.x + 2
  
    bra ++
    
+
    adc.b _dimension.position.x
    sta.b _dimension.position.x
    sep #$20
    lda _dimension.position.x + 2
    sbc #0
    sta _dimension.position.x + 2

++
  rep #$31
  rts


;limit distance to 7 bits
_clampDistance:
  AX16
  cmp.w #$8000
  bcs ++
    ;distance positive
    ;any out of range bits set? clamp to max value
    bit.w #$3f ~$ffff
    beq +
      lda.w #$3f
      bra +

++
    ;distance negative
    cmp.w #$ffc1
    bcs +
      lda.w #$7f

+
  and.w #$7f
  rts


interface.dimension.center:
  AX16
  lda _dimension.size.x
  lsr a
  pha
  lda _dimension.position.x+1
  sec
  sbc 1,s
  sta _dimension.position.x+1
  pla
  lda _dimension.size.y
  lsr a
  pha
  lda _dimension.position.y+1
  sec
  sbc 1,s
  sta _dimension.position.y+1
  pla
  rts


;a: sound effect
interface.dimension.playSoundEffect:
  AX16
  ldy.w #0  ;default vol
  ldx.w #0  ;default pitch
  jmp core.audio.playEffect


.ends
